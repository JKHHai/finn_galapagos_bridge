// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::ap_ST_fsm_state1 = "1";
const sc_lv<4> StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::ap_ST_fsm_state2 = "10";
const sc_lv<4> StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::ap_ST_fsm_state3 = "100";
const sc_lv<4> StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::ap_ST_fsm_state4 = "1000";
const sc_lv<1> StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::ap_const_lv1_0 = "0";
const sc_lv<1> StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::ap_const_lv1_1 = "1";
const sc_lv<2> StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::ap_const_lv2_0 = "00";
const sc_lv<2> StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::ap_const_lv2_2 = "10";
const sc_lv<2> StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::ap_const_lv2_3 = "11";
const sc_lv<2> StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::ap_const_lv2_1 = "1";
const sc_lv<32> StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::ap_const_lv32_1 = "1";
const sc_lv<32> StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::ap_const_lv32_2 = "10";
const sc_lv<32> StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::ap_const_lv32_3 = "11";
const bool StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::ap_const_boolean_1 = true;

StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_Matrix_Vector_Activa_fu_28 = new StreamingFCLayer_Batch_3_Matrix_Vector_Activa("grp_Matrix_Vector_Activa_fu_28");
    grp_Matrix_Vector_Activa_fu_28->ap_clk(ap_clk);
    grp_Matrix_Vector_Activa_fu_28->ap_rst(ap_rst_n_inv);
    grp_Matrix_Vector_Activa_fu_28->ap_start(grp_Matrix_Vector_Activa_fu_28_ap_start);
    grp_Matrix_Vector_Activa_fu_28->ap_done(grp_Matrix_Vector_Activa_fu_28_ap_done);
    grp_Matrix_Vector_Activa_fu_28->ap_idle(grp_Matrix_Vector_Activa_fu_28_ap_idle);
    grp_Matrix_Vector_Activa_fu_28->ap_ready(grp_Matrix_Vector_Activa_fu_28_ap_ready);
    grp_Matrix_Vector_Activa_fu_28->in_V_V_TDATA(in0_V_V_0_data_out);
    grp_Matrix_Vector_Activa_fu_28->in_V_V_TVALID(grp_Matrix_Vector_Activa_fu_28_in_V_V_TVALID);
    grp_Matrix_Vector_Activa_fu_28->in_V_V_TREADY(grp_Matrix_Vector_Activa_fu_28_in_V_V_TREADY);
    grp_Matrix_Vector_Activa_fu_28->out_V_V_TDATA(grp_Matrix_Vector_Activa_fu_28_out_V_V_TDATA);
    grp_Matrix_Vector_Activa_fu_28->out_V_V_TVALID(grp_Matrix_Vector_Activa_fu_28_out_V_V_TVALID);
    grp_Matrix_Vector_Activa_fu_28->out_V_V_TREADY(grp_Matrix_Vector_Activa_fu_28_out_V_V_TREADY);
    grp_Matrix_Vector_Activa_fu_28->weight_V_V_TDATA(weights_V_V_0_data_out);
    grp_Matrix_Vector_Activa_fu_28->weight_V_V_TVALID(grp_Matrix_Vector_Activa_fu_28_weight_V_V_TVALID);
    grp_Matrix_Vector_Activa_fu_28->weight_V_V_TREADY(grp_Matrix_Vector_Activa_fu_28_weight_V_V_TREADY);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_Matrix_Vector_Activa_fu_28_ap_start);
    sensitive << ( grp_Matrix_Vector_Activa_fu_28_ap_start_reg );

    SC_METHOD(thread_grp_Matrix_Vector_Activa_fu_28_in_V_V_TVALID);
    sensitive << ( in0_V_V_0_state );

    SC_METHOD(thread_grp_Matrix_Vector_Activa_fu_28_out_V_V_TREADY);
    sensitive << ( out_V_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_Matrix_Vector_Activa_fu_28_weight_V_V_TVALID);
    sensitive << ( weights_V_V_0_state );

    SC_METHOD(thread_in0_V_V_0_ack_in);
    sensitive << ( in0_V_V_0_state );

    SC_METHOD(thread_in0_V_V_0_ack_out);
    sensitive << ( grp_Matrix_Vector_Activa_fu_28_in_V_V_TREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_in0_V_V_0_data_out);
    sensitive << ( in0_V_V_0_payload_A );
    sensitive << ( in0_V_V_0_payload_B );
    sensitive << ( in0_V_V_0_sel );

    SC_METHOD(thread_in0_V_V_0_load_A);
    sensitive << ( in0_V_V_0_sel_wr );
    sensitive << ( in0_V_V_0_state_cmp_full );

    SC_METHOD(thread_in0_V_V_0_load_B);
    sensitive << ( in0_V_V_0_sel_wr );
    sensitive << ( in0_V_V_0_state_cmp_full );

    SC_METHOD(thread_in0_V_V_0_sel);
    sensitive << ( in0_V_V_0_sel_rd );

    SC_METHOD(thread_in0_V_V_0_state_cmp_full);
    sensitive << ( in0_V_V_0_state );

    SC_METHOD(thread_in0_V_V_0_vld_in);
    sensitive << ( in0_V_V_TVALID );

    SC_METHOD(thread_in0_V_V_0_vld_out);
    sensitive << ( in0_V_V_0_state );

    SC_METHOD(thread_in0_V_V_TREADY);
    sensitive << ( in0_V_V_0_state );

    SC_METHOD(thread_out_V_V_1_ack_in);
    sensitive << ( out_V_V_1_state );

    SC_METHOD(thread_out_V_V_1_ack_out);
    sensitive << ( out_V_V_TREADY );

    SC_METHOD(thread_out_V_V_1_data_out);
    sensitive << ( out_V_V_1_payload_A );
    sensitive << ( out_V_V_1_payload_B );
    sensitive << ( out_V_V_1_sel );

    SC_METHOD(thread_out_V_V_1_load_A);
    sensitive << ( out_V_V_1_sel_wr );
    sensitive << ( out_V_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_V_1_load_B);
    sensitive << ( out_V_V_1_sel_wr );
    sensitive << ( out_V_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_V_1_sel);
    sensitive << ( out_V_V_1_sel_rd );

    SC_METHOD(thread_out_V_V_1_state_cmp_full);
    sensitive << ( out_V_V_1_state );

    SC_METHOD(thread_out_V_V_1_vld_in);
    sensitive << ( grp_Matrix_Vector_Activa_fu_28_out_V_V_TVALID );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_V_V_1_vld_out);
    sensitive << ( out_V_V_1_state );

    SC_METHOD(thread_out_V_V_TDATA);
    sensitive << ( out_V_V_1_data_out );

    SC_METHOD(thread_out_V_V_TVALID);
    sensitive << ( out_V_V_1_state );

    SC_METHOD(thread_weights_V_V_0_ack_in);
    sensitive << ( weights_V_V_0_state );

    SC_METHOD(thread_weights_V_V_0_ack_out);
    sensitive << ( grp_Matrix_Vector_Activa_fu_28_weight_V_V_TREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_weights_V_V_0_data_out);
    sensitive << ( weights_V_V_0_payload_A );
    sensitive << ( weights_V_V_0_payload_B );
    sensitive << ( weights_V_V_0_sel );

    SC_METHOD(thread_weights_V_V_0_load_A);
    sensitive << ( weights_V_V_0_sel_wr );
    sensitive << ( weights_V_V_0_state_cmp_full );

    SC_METHOD(thread_weights_V_V_0_load_B);
    sensitive << ( weights_V_V_0_sel_wr );
    sensitive << ( weights_V_V_0_state_cmp_full );

    SC_METHOD(thread_weights_V_V_0_sel);
    sensitive << ( weights_V_V_0_sel_rd );

    SC_METHOD(thread_weights_V_V_0_state_cmp_full);
    sensitive << ( weights_V_V_0_state );

    SC_METHOD(thread_weights_V_V_0_vld_in);
    sensitive << ( weights_V_V_TVALID );

    SC_METHOD(thread_weights_V_V_0_vld_out);
    sensitive << ( weights_V_V_0_state );

    SC_METHOD(thread_weights_V_V_TREADY);
    sensitive << ( weights_V_V_0_state );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( out_V_V_1_ack_in );
    sensitive << ( out_V_V_1_state );
    sensitive << ( grp_Matrix_Vector_Activa_fu_28_ap_done );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    in0_V_V_0_sel_rd = SC_LOGIC_0;
    in0_V_V_0_sel_wr = SC_LOGIC_0;
    in0_V_V_0_state = "00";
    weights_V_V_0_sel_rd = SC_LOGIC_0;
    weights_V_V_0_sel_wr = SC_LOGIC_0;
    weights_V_V_0_state = "00";
    out_V_V_1_sel_rd = SC_LOGIC_0;
    out_V_V_1_sel_wr = SC_LOGIC_0;
    out_V_V_1_state = "00";
    grp_Matrix_Vector_Activa_fu_28_ap_start_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, in0_V_V_TDATA, "(port)in0_V_V_TDATA");
    sc_trace(mVcdFile, in0_V_V_TVALID, "(port)in0_V_V_TVALID");
    sc_trace(mVcdFile, in0_V_V_TREADY, "(port)in0_V_V_TREADY");
    sc_trace(mVcdFile, weights_V_V_TDATA, "(port)weights_V_V_TDATA");
    sc_trace(mVcdFile, weights_V_V_TVALID, "(port)weights_V_V_TVALID");
    sc_trace(mVcdFile, weights_V_V_TREADY, "(port)weights_V_V_TREADY");
    sc_trace(mVcdFile, out_V_V_TDATA, "(port)out_V_V_TDATA");
    sc_trace(mVcdFile, out_V_V_TVALID, "(port)out_V_V_TVALID");
    sc_trace(mVcdFile, out_V_V_TREADY, "(port)out_V_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, in0_V_V_0_data_out, "in0_V_V_0_data_out");
    sc_trace(mVcdFile, in0_V_V_0_vld_in, "in0_V_V_0_vld_in");
    sc_trace(mVcdFile, in0_V_V_0_vld_out, "in0_V_V_0_vld_out");
    sc_trace(mVcdFile, in0_V_V_0_ack_in, "in0_V_V_0_ack_in");
    sc_trace(mVcdFile, in0_V_V_0_ack_out, "in0_V_V_0_ack_out");
    sc_trace(mVcdFile, in0_V_V_0_payload_A, "in0_V_V_0_payload_A");
    sc_trace(mVcdFile, in0_V_V_0_payload_B, "in0_V_V_0_payload_B");
    sc_trace(mVcdFile, in0_V_V_0_sel_rd, "in0_V_V_0_sel_rd");
    sc_trace(mVcdFile, in0_V_V_0_sel_wr, "in0_V_V_0_sel_wr");
    sc_trace(mVcdFile, in0_V_V_0_sel, "in0_V_V_0_sel");
    sc_trace(mVcdFile, in0_V_V_0_load_A, "in0_V_V_0_load_A");
    sc_trace(mVcdFile, in0_V_V_0_load_B, "in0_V_V_0_load_B");
    sc_trace(mVcdFile, in0_V_V_0_state, "in0_V_V_0_state");
    sc_trace(mVcdFile, in0_V_V_0_state_cmp_full, "in0_V_V_0_state_cmp_full");
    sc_trace(mVcdFile, weights_V_V_0_data_out, "weights_V_V_0_data_out");
    sc_trace(mVcdFile, weights_V_V_0_vld_in, "weights_V_V_0_vld_in");
    sc_trace(mVcdFile, weights_V_V_0_vld_out, "weights_V_V_0_vld_out");
    sc_trace(mVcdFile, weights_V_V_0_ack_in, "weights_V_V_0_ack_in");
    sc_trace(mVcdFile, weights_V_V_0_ack_out, "weights_V_V_0_ack_out");
    sc_trace(mVcdFile, weights_V_V_0_payload_A, "weights_V_V_0_payload_A");
    sc_trace(mVcdFile, weights_V_V_0_payload_B, "weights_V_V_0_payload_B");
    sc_trace(mVcdFile, weights_V_V_0_sel_rd, "weights_V_V_0_sel_rd");
    sc_trace(mVcdFile, weights_V_V_0_sel_wr, "weights_V_V_0_sel_wr");
    sc_trace(mVcdFile, weights_V_V_0_sel, "weights_V_V_0_sel");
    sc_trace(mVcdFile, weights_V_V_0_load_A, "weights_V_V_0_load_A");
    sc_trace(mVcdFile, weights_V_V_0_load_B, "weights_V_V_0_load_B");
    sc_trace(mVcdFile, weights_V_V_0_state, "weights_V_V_0_state");
    sc_trace(mVcdFile, weights_V_V_0_state_cmp_full, "weights_V_V_0_state_cmp_full");
    sc_trace(mVcdFile, out_V_V_1_data_out, "out_V_V_1_data_out");
    sc_trace(mVcdFile, out_V_V_1_vld_in, "out_V_V_1_vld_in");
    sc_trace(mVcdFile, out_V_V_1_vld_out, "out_V_V_1_vld_out");
    sc_trace(mVcdFile, out_V_V_1_ack_in, "out_V_V_1_ack_in");
    sc_trace(mVcdFile, out_V_V_1_ack_out, "out_V_V_1_ack_out");
    sc_trace(mVcdFile, out_V_V_1_payload_A, "out_V_V_1_payload_A");
    sc_trace(mVcdFile, out_V_V_1_payload_B, "out_V_V_1_payload_B");
    sc_trace(mVcdFile, out_V_V_1_sel_rd, "out_V_V_1_sel_rd");
    sc_trace(mVcdFile, out_V_V_1_sel_wr, "out_V_V_1_sel_wr");
    sc_trace(mVcdFile, out_V_V_1_sel, "out_V_V_1_sel");
    sc_trace(mVcdFile, out_V_V_1_load_A, "out_V_V_1_load_A");
    sc_trace(mVcdFile, out_V_V_1_load_B, "out_V_V_1_load_B");
    sc_trace(mVcdFile, out_V_V_1_state, "out_V_V_1_state");
    sc_trace(mVcdFile, out_V_V_1_state_cmp_full, "out_V_V_1_state_cmp_full");
    sc_trace(mVcdFile, grp_Matrix_Vector_Activa_fu_28_ap_start, "grp_Matrix_Vector_Activa_fu_28_ap_start");
    sc_trace(mVcdFile, grp_Matrix_Vector_Activa_fu_28_ap_done, "grp_Matrix_Vector_Activa_fu_28_ap_done");
    sc_trace(mVcdFile, grp_Matrix_Vector_Activa_fu_28_ap_idle, "grp_Matrix_Vector_Activa_fu_28_ap_idle");
    sc_trace(mVcdFile, grp_Matrix_Vector_Activa_fu_28_ap_ready, "grp_Matrix_Vector_Activa_fu_28_ap_ready");
    sc_trace(mVcdFile, grp_Matrix_Vector_Activa_fu_28_in_V_V_TVALID, "grp_Matrix_Vector_Activa_fu_28_in_V_V_TVALID");
    sc_trace(mVcdFile, grp_Matrix_Vector_Activa_fu_28_in_V_V_TREADY, "grp_Matrix_Vector_Activa_fu_28_in_V_V_TREADY");
    sc_trace(mVcdFile, grp_Matrix_Vector_Activa_fu_28_out_V_V_TDATA, "grp_Matrix_Vector_Activa_fu_28_out_V_V_TDATA");
    sc_trace(mVcdFile, grp_Matrix_Vector_Activa_fu_28_out_V_V_TVALID, "grp_Matrix_Vector_Activa_fu_28_out_V_V_TVALID");
    sc_trace(mVcdFile, grp_Matrix_Vector_Activa_fu_28_out_V_V_TREADY, "grp_Matrix_Vector_Activa_fu_28_out_V_V_TREADY");
    sc_trace(mVcdFile, grp_Matrix_Vector_Activa_fu_28_weight_V_V_TVALID, "grp_Matrix_Vector_Activa_fu_28_weight_V_V_TVALID");
    sc_trace(mVcdFile, grp_Matrix_Vector_Activa_fu_28_weight_V_V_TREADY, "grp_Matrix_Vector_Activa_fu_28_weight_V_V_TREADY");
    sc_trace(mVcdFile, grp_Matrix_Vector_Activa_fu_28_ap_start_reg, "grp_Matrix_Vector_Activa_fu_28_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
#endif

    }
    mHdltvinHandle.open("StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3.hdltvin.dat");
    mHdltvoutHandle.open("StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3.hdltvout.dat");
}

StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::~StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_Matrix_Vector_Activa_fu_28;
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_Matrix_Vector_Activa_fu_28_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            grp_Matrix_Vector_Activa_fu_28_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_Matrix_Vector_Activa_fu_28_ap_ready.read())) {
            grp_Matrix_Vector_Activa_fu_28_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in0_V_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in0_V_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in0_V_V_0_vld_out.read()))) {
            in0_V_V_0_sel_rd =  (sc_logic) (~in0_V_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in0_V_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in0_V_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in0_V_V_0_ack_in.read()))) {
            in0_V_V_0_sel_wr =  (sc_logic) (~in0_V_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in0_V_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in0_V_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in0_V_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(in0_V_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in0_V_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(in0_V_V_0_state.read(), ap_const_lv2_2)))) {
            in0_V_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in0_V_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in0_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in0_V_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in0_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in0_V_V_0_state.read(), ap_const_lv2_1)))) {
            in0_V_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in0_V_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(in0_V_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in0_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in0_V_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(in0_V_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in0_V_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in0_V_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in0_V_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in0_V_V_0_ack_out.read()))))) {
            in0_V_V_0_state = ap_const_lv2_3;
        } else {
            in0_V_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_V_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_V_1_vld_out.read()))) {
            out_V_V_1_sel_rd =  (sc_logic) (~out_V_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_V_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_V_1_ack_in.read()))) {
            out_V_V_1_sel_wr =  (sc_logic) (~out_V_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_V_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_V_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_V_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_V_V_1_state.read())))) {
            out_V_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_V_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_V_1_state.read())))) {
            out_V_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_V_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_V_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_V_V_1_ack_out.read()))))) {
            out_V_V_1_state = ap_const_lv2_3;
        } else {
            out_V_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        weights_V_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, weights_V_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, weights_V_V_0_vld_out.read()))) {
            weights_V_V_0_sel_rd =  (sc_logic) (~weights_V_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        weights_V_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, weights_V_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, weights_V_V_0_ack_in.read()))) {
            weights_V_V_0_sel_wr =  (sc_logic) (~weights_V_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        weights_V_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, weights_V_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, weights_V_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, weights_V_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, weights_V_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, weights_V_V_0_state.read())))) {
            weights_V_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, weights_V_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, weights_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, weights_V_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, weights_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, weights_V_V_0_state.read())))) {
            weights_V_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, weights_V_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, weights_V_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, weights_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, weights_V_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, weights_V_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, weights_V_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, weights_V_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, weights_V_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, weights_V_V_0_ack_out.read()))))) {
            weights_V_V_0_state = ap_const_lv2_3;
        } else {
            weights_V_V_0_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in0_V_V_0_load_A.read())) {
        in0_V_V_0_payload_A = in0_V_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in0_V_V_0_load_B.read())) {
        in0_V_V_0_payload_B = in0_V_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_V_1_load_A.read())) {
        out_V_V_1_payload_A = grp_Matrix_Vector_Activa_fu_28_out_V_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_V_1_load_B.read())) {
        out_V_V_1_payload_B = grp_Matrix_Vector_Activa_fu_28_out_V_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, weights_V_V_0_load_A.read())) {
        weights_V_V_0_payload_A = weights_V_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, weights_V_V_0_load_B.read())) {
        weights_V_V_0_payload_B = weights_V_V_TDATA.read();
    }
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_grp_Matrix_Vector_Activa_fu_28_ap_start() {
    grp_Matrix_Vector_Activa_fu_28_ap_start = grp_Matrix_Vector_Activa_fu_28_ap_start_reg.read();
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_grp_Matrix_Vector_Activa_fu_28_in_V_V_TVALID() {
    grp_Matrix_Vector_Activa_fu_28_in_V_V_TVALID = in0_V_V_0_state.read()[0];
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_grp_Matrix_Vector_Activa_fu_28_out_V_V_TREADY() {
    grp_Matrix_Vector_Activa_fu_28_out_V_V_TREADY = (out_V_V_1_ack_in.read() & ap_CS_fsm_state3.read());
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_grp_Matrix_Vector_Activa_fu_28_weight_V_V_TVALID() {
    grp_Matrix_Vector_Activa_fu_28_weight_V_V_TVALID = weights_V_V_0_state.read()[0];
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_in0_V_V_0_ack_in() {
    in0_V_V_0_ack_in = in0_V_V_0_state.read()[1];
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_in0_V_V_0_ack_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        in0_V_V_0_ack_out = grp_Matrix_Vector_Activa_fu_28_in_V_V_TREADY.read();
    } else {
        in0_V_V_0_ack_out = ap_const_logic_0;
    }
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_in0_V_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in0_V_V_0_sel.read())) {
        in0_V_V_0_data_out = in0_V_V_0_payload_B.read();
    } else {
        in0_V_V_0_data_out = in0_V_V_0_payload_A.read();
    }
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_in0_V_V_0_load_A() {
    in0_V_V_0_load_A = (in0_V_V_0_state_cmp_full.read() & ~in0_V_V_0_sel_wr.read());
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_in0_V_V_0_load_B() {
    in0_V_V_0_load_B = (in0_V_V_0_sel_wr.read() & in0_V_V_0_state_cmp_full.read());
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_in0_V_V_0_sel() {
    in0_V_V_0_sel = in0_V_V_0_sel_rd.read();
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_in0_V_V_0_state_cmp_full() {
    in0_V_V_0_state_cmp_full =  (sc_logic) ((!in0_V_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in0_V_V_0_state.read() != ap_const_lv2_1))[0];
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_in0_V_V_0_vld_in() {
    in0_V_V_0_vld_in = in0_V_V_TVALID.read();
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_in0_V_V_0_vld_out() {
    in0_V_V_0_vld_out = in0_V_V_0_state.read()[0];
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_in0_V_V_TREADY() {
    in0_V_V_TREADY = in0_V_V_0_state.read()[1];
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_out_V_V_1_ack_in() {
    out_V_V_1_ack_in = out_V_V_1_state.read()[1];
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_out_V_V_1_ack_out() {
    out_V_V_1_ack_out = out_V_V_TREADY.read();
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_out_V_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_V_1_sel.read())) {
        out_V_V_1_data_out = out_V_V_1_payload_B.read();
    } else {
        out_V_V_1_data_out = out_V_V_1_payload_A.read();
    }
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_out_V_V_1_load_A() {
    out_V_V_1_load_A = (out_V_V_1_state_cmp_full.read() & ~out_V_V_1_sel_wr.read());
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_out_V_V_1_load_B() {
    out_V_V_1_load_B = (out_V_V_1_sel_wr.read() & out_V_V_1_state_cmp_full.read());
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_out_V_V_1_sel() {
    out_V_V_1_sel = out_V_V_1_sel_rd.read();
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_out_V_V_1_state_cmp_full() {
    out_V_V_1_state_cmp_full =  (sc_logic) ((!out_V_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_V_V_1_state.read() != ap_const_lv2_1))[0];
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_out_V_V_1_vld_in() {
    out_V_V_1_vld_in = grp_Matrix_Vector_Activa_fu_28_out_V_V_TVALID.read();
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_out_V_V_1_vld_out() {
    out_V_V_1_vld_out = out_V_V_1_state.read()[0];
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_out_V_V_TDATA() {
    out_V_V_TDATA = out_V_V_1_data_out.read();
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_out_V_V_TVALID() {
    out_V_V_TVALID = out_V_V_1_state.read()[0];
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_weights_V_V_0_ack_in() {
    weights_V_V_0_ack_in = weights_V_V_0_state.read()[1];
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_weights_V_V_0_ack_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        weights_V_V_0_ack_out = grp_Matrix_Vector_Activa_fu_28_weight_V_V_TREADY.read();
    } else {
        weights_V_V_0_ack_out = ap_const_logic_0;
    }
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_weights_V_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, weights_V_V_0_sel.read())) {
        weights_V_V_0_data_out = weights_V_V_0_payload_B.read();
    } else {
        weights_V_V_0_data_out = weights_V_V_0_payload_A.read();
    }
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_weights_V_V_0_load_A() {
    weights_V_V_0_load_A = (weights_V_V_0_state_cmp_full.read() & ~weights_V_V_0_sel_wr.read());
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_weights_V_V_0_load_B() {
    weights_V_V_0_load_B = (weights_V_V_0_sel_wr.read() & weights_V_V_0_state_cmp_full.read());
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_weights_V_V_0_sel() {
    weights_V_V_0_sel = weights_V_V_0_sel_rd.read();
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_weights_V_V_0_state_cmp_full() {
    weights_V_V_0_state_cmp_full =  (sc_logic) ((!weights_V_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(weights_V_V_0_state.read() != ap_const_lv2_1))[0];
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_weights_V_V_0_vld_in() {
    weights_V_V_0_vld_in = weights_V_V_TVALID.read();
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_weights_V_V_0_vld_out() {
    weights_V_V_0_vld_out = weights_V_V_0_state.read()[0];
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_weights_V_V_TREADY() {
    weights_V_V_TREADY = weights_V_V_0_state.read()[1];
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(grp_Matrix_Vector_Activa_fu_28_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(out_V_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void StreamingFCLayer_Batch_3_StreamingFCLayer_Batch_3::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in0_V_V_TDATA\" :  \"" << in0_V_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in0_V_V_TVALID\" :  \"" << in0_V_V_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"in0_V_V_TREADY\" :  \"" << in0_V_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"weights_V_V_TDATA\" :  \"" << weights_V_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"weights_V_V_TVALID\" :  \"" << weights_V_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_V_V_TREADY\" :  \"" << weights_V_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_V_TDATA\" :  \"" << out_V_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_V_TVALID\" :  \"" << out_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_V_V_TREADY\" :  \"" << out_V_V_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

